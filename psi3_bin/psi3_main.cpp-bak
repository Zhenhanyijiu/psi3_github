
// #include <iostream>
// #include "Network/BtChannel.h"
// #include "Network/BtEndpoint.h"

using namespace std;
#include "Common/Defines.h"
using namespace osuCrypto;

// #include "OtBinMain.h"
// #include "OtBinMain.v2.h"
// #include "bitPosition.h"

// #include <numeric>
// #include "Common/Log.h"
// #include "gbf.h"
// #include "o1party.h"
// #include "tpsi.h"
#include "psi3.h"
#include <stdio.h>
//int miraclTestMain();

void usage(const char *argv0)
{
	std::cout << "Error! Please use:" << std::endl;
	std::cout << "\t 1. For unit test: " << argv0 << " -u" << std::endl;
	std::cout << "\t 2. For simulation (5 parties <=> 5 terminals): " << std::endl;
	;
	std::cout << "\t\t each terminal: " << argv0 << " -n 5 -t 2 -m 12 -p [pIdx]" << std::endl;
}
int main(int argc, char **argv)
{

	u64 pSetSize = 5, psiSecParam = 40, bitSize = 128;

	u64 nParties, tParties, opt_basedOPPRF, setSize, isAug;

	u64 roundOPPRF;

	switch (argc)
	{
	case 5: //3psi
		if (argv[1][0] == '-' && argv[1][1] == 'm')
			setSize = 1 << atoi(argv[2]);
		else
		{
			cout << "setSize: wrong format\n";
			usage(argv[0]);
			return 0;
		}

		if (argv[3][0] == '-' && argv[3][1] == 'p')
		{
			u64 pIdx = atoi(argv[4]);
			//cout << setSize << " \t"  << nParties << " \t" << tParties << "\t" << pIdx << "\n";
			// party_psi3(pIdx, setSize, PaxosOkvs, secSemiHonest);
			// #define GbfOkvs 0
			// #define PolyOkvs 1
			// #define PaxosOkvs 2
			// #define	TableOPPRF 0

			// #define secMalicious 0
			// #define secSemiHonest 1
			printf("===>>>okvs:%d\n", PaxosOkvs);
			printf("===>>>sec:%d\n", secMalicious);
			party_psi3(pIdx, setSize, PolyOkvs, secMalicious);
			//party_psi2_server_aided(pIdx, setSize,secSemiHonest);
		}
		else
		{
			cout << "pIdx: wrong format\n";
			usage(argv[0]);
			return 0;
		}
		break;
	}

	return 0;
}
